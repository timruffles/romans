require "lunatest"

package.path = package.path .. ";../?.lua"
require "../libs/protractor"
require "../src/helpers"
local matrix = require '../libs/matrix'
local ser = require '../libs/table2'
local Point = protractor.Point
local DollarRecognizer = protractor.DollarRecognizer

local test_data
local makeTestData = function()
	return {
	vs = {Point(50,366),Point(55,356),Point(60,349),Point(73,326),Point(103,275),Point(123,248),Point(137,224),Point(143,212),Point(148,203),Point(152,206),Point(154,211),Point(179,245),Point(200,269),Point(235,304),Point(262,328),Point(274,340),Point(276,345),Point(276,346)},
	vs2 = {Point(51,384),Point(53,379),Point(57,365),Point(66,335),Point(74,310),Point(84,286),Point(95,261),Point(112,233),Point(124,218),Point(132,209),Point(135,206),Point(137,206),Point(143,225),Point(161,270),Point(176,304),Point(195,336),Point(205,357),Point(211,371),Point(212,377),Point(212,378)},
	vs3 = {Point(63,381),Point(64,373),Point(67,360),Point(75,328),Point(85,287),Point(91,250),Point(95,231),Point(100,217),Point(106,204),Point(109,196),Point(110,194),Point(111,194),Point(115,200),Point(139,227),Point(167,262),Point(196,310),Point(226,367),Point(242,405),Point(248,426),Point(251,443),Point(252,445)},
	os = {Point(111,413),Point(107,409),Point(93,391),Point(81,372),Point(73,354),Point(70,335),Point(70,320),Point(75,305),Point(86,289),Point(102,275),Point(130,261),Point(171,250),Point(214,249),Point(232,250),Point(235,254),Point(237,271),Point(234,297),Point(225,331),Point(213,358),Point(199,376),Point(186,389),Point(170,397),Point(162,400),Point(158,401)},
	square = {Point(78,149),Point(78,153),Point(78,157),Point(78,160),Point(79,162),Point(79,164),Point(79,167),Point(79,169),Point(79,173),Point(79,178),Point(79,183),Point(80,189),Point(80,193),Point(80,198),Point(80,202),Point(81,208),Point(81,210),Point(81,216),Point(82,222),Point(82,224),Point(82,227),Point(83,229),Point(83,231),Point(85,230),Point(88,232),Point(90,233),Point(92,232),Point(94,233),Point(99,232),Point(102,233),Point(106,233),Point(109,234),Point(117,235),Point(123,236),Point(126,236),Point(135,237),Point(142,238),Point(145,238),Point(152,238),Point(154,239),Point(165,238),Point(174,237),Point(179,236),Point(186,235),Point(191,235),Point(195,233),Point(197,233),Point(200,233),Point(201,235),Point(201,233),Point(199,231),Point(198,226),Point(198,220),Point(196,207),Point(195,195),Point(195,181),Point(195,173),Point(195,163),Point(194,155),Point(192,145),Point(192,143),Point(192,138),Point(191,135),Point(191,133),Point(191,130),Point(190,128),Point(188,129),Point(186,129),Point(181,132),Point(173,131),Point(162,131),Point(151,132),Point(149,132),Point(138,132),Point(136,132),Point(122,131),Point(120,131),Point(109,130),Point(107,130),Point(90,132)},
	-- TODO this was copied from protractor.lua, and does not match. Either matchers can't be used as test data, or the protractor port is buggered... 
	triangle = {Point(137,139),Point(135,141),Point(133,144),Point(132,146),Point(130,149),Point(128,151),Point(126,155),Point(123,160),Point(120,166),Point(116,171),Point(112,177),Point(107,183),Point(102,188),Point(100,191),Point(95,195),Point(90,199),Point(86,203),Point(82,206),Point(80,209),Point(75,213),Point(73,213),Point(70,216),Point(67,219),Point(64,221),Point(61,223),Point(60,225),Point(62,226),Point(65,225),Point(67,226),Point(74,226),Point(77,227),Point(85,229),Point(91,230),Point(99,231),Point(108,232),Point(116,233),Point(125,233),Point(134,234),Point(145,233),Point(153,232),Point(160,233),Point(170,234),Point(177,235),Point(179,236),Point(186,237),Point(193,238),Point(198,239),Point(200,237),Point(202,239),Point(204,238),Point(206,234),Point(205,230),Point(202,222),Point(197,216),Point(192,207),Point(186,198),Point(179,189),Point(174,183),Point(170,178),Point(164,171),Point(161,168),Point(154,160),Point(148,155),Point(143,150),Point(138,148),Point(136,148)},
	homemade = {
		Point(2.1249995231628,-0.42499971389771),
		Point(1.8999996185303,-0.42499971389771),
		Point(1.3999996185303,-0.49999952316284),
		Point(1.1249995231628,-0.59999942779541),
		Point(0.74999952316284,-0.77499961853027),
		Point(0.34999990463257,-0.97499942779541),
		Point(-2.3841857910156e-07,-1.1249995231628),
		Point(-0.25000023841858,-1.2249994277954),
		Point(-0.65000009536743,-1.4749994277954),
		Point(-0.87500023841858,-1.6249995231628),
		Point(-1.1500000953674,-1.7749996185303),
		Point(-1.3750002384186,-1.8999996185303),
		Point(-1.5000002384186,-1.9749994277954),
		Point(-1.6750001907349,-2.0499992370605),
		Point(-1.7750000953674,-2.0749998092651),
		Point(-1.8500001430511,-2.1249990463257),
		Point(-1.8750002384186,-2.1499996185303),
		Point(-1.8750002384186,-2.1499996185303),
		Point(-1.6750001907349,-2.2749996185303),
		Point(-0.90000009536743,-2.6749992370605),
		Point(-0.050000190734863,-3.0749998092651),
		Point(1.0249996185303,-3.6249990463257),
		Point(1.5999994277954,-3.9999990463257),
		Point(1.9499998092651,-4.2749996185303),
		Point(2.1999998092651,-4.5499992370605),
		Point(2.3999996185303,-4.7499990463257),
		Point(2.5249996185303,-4.8999996185303),
		Point(2.7499995231628,-5.0749998092651),
		Point(3.0499997138977,-5.2749996185303),
		Point(3.3749995231628,-5.4749994277954),
		Point(3.6249995231628,-5.6249990463257),
		Point(3.7749996185303,-5.7249994277954),
		Point(3.8499994277954,-5.7999992370605),
		Point(3.8999996185303,-5.8499994277954)
	}
	}
end

function setup()
	test_data = makeTestData()
end
function test_ResampleSquare()
	local resampled = protractor.Resample(test_data.square,64)
	assert_equal(64,#resampled)
end

function test_Resample()
	local resamples = protractor.Resample({
		Point(0,0),
		Point(5,0),
		Point(10,0),
		Point(15,0),
		Point(20,0),
		Point(25,0),
		Point(30,0),
		Point(35,0),
		Point(40,0),
		Point(45,0),
		Point(50,0),
	},5)
	assert_equal(0,resamples[1].X)
	assert_equal(37.5,resamples[4].X)
end

function test_ResampledPoints()
	local expectedForTriangle = {Point(137,139),Point(133.19065442305558,143.71401836541662),Point(130.0527271108978,148.92090933365333),Point(126.58376891613112,153.83246216773776),Point(123.53817677228182,159.10303871286362),Point(120.74414567066351,164.51170865867297),Point(117.23490547288925,169.45636815888844),Point(113.71826406242332,174.42260390636503),Point(110.08416709813751,179.298999482235),Point(106.10010180270787,183.89989819729215),Point(101.83810981883077,188.24283527175382),Point(97.83186180114724,192.7345105590822),Point(93.07615894011589,196.53907284790728),Point(88.4791082939693,200.52089170603068),Point(83.93257385665864,204.55056960750602),Point(79.9461179790882,209.04310561672943),Point(75.19041511805685,212.84766790555452),Point(70.28016968446786,215.71983031553214),Point(65.79235321961681,219.8050978535888),Point(60.85216035472161,223.2956792905568),Point(63.848713176509925,225.3837622744967),Point(69.64064040614365,226),Point(75.64208697962772,226.54736232654258),Point(81.51980198540443,228.1299504963511),Point(87.46890971222881,229.41148495203814),Point(93.49108777934612,230.31138597241826),Point(99.53519393939031,231.0594659932656),Point(105.58821547560868,231.7320239417343),Point(111.6353537186052,232.45441921482566),Point(117.69165833850502,233),Point(123.78192958960474,233),Point(129.8424011676393,233.53804457418215),Point(135.89925494129994,233.8273404598818),Point(141.96451470581573,233.2759532085622),Point(148.0187756667254,232.62265304165933),Point(154.05952506604297,232.15136072372042),Point(160.0890412817909,233.0089041281791),Point(166.14908767510187,233.6149087675102),Point(172.19783860741262,234.3139769439161),Point(178.10851343831948,235.55425671915975),Point(184.04236612786542,236.7203380182665),Point(190.07142706915076,237.5816324384501),Point(196.0711451924694,238.61422903849387),Point(200.91555511862273,237.91555511862273),Point(205.0377889393617,235.92442212127665),Point(205.04472447022982,230.17889788091932),Point(202.92631146509189,224.47016390691167),Point(199.78999700052879,219.34799640063457),Point(196.15879038312968,214.48582268963347),Point(193.20109320107267,209.1619677619308),Point(189.99361112787693,203.9904166918154),Point(186.61533646982704,198.92300470474058),Point(182.9419878018349,194.06827003093056),Point(179.20292293346245,189.26090091445172),Point(175.31270052527037,184.57524063032446),Point(171.4763772615424,179.845471576928),Point(167.57455619746543,175.17031556370966),Point(163.57740379242335,170.57740379242335),Point(159.3897772178728,166.15974539185464),Point(155.37930553585446,161.57634918383368),Point(150.93044240011926,157.4420353334327),Point(146.39084408653108,153.39084408653108),Point(141.7977215160441,149.51908860641765),Point(136,148)}
	local resampled = protractor.Resample(test_data.triangle,64)
	for i,point in ipairs(expectedForTriangle) do
		assert_equal(point.X,resampled[i].X)	
		assert_equal(point.Y,resampled[i].Y)	
	end
end

function test_IndicativeAngle()
	-- relies on test_ResampledPoints being true
	local resampled = protractor.Resample(test_data.triangle,64)
	assert_equal(1.5796400552255103,protractor.IndicativeAngle(resampled),0.0001)
end

function test_UnistrokeProcess()
	local uni = protractor.Unistroke("foo",test_data.triangle)

	local expectedVector = {-0.18961396130306699,6.620917293977963e-17,-0.17566235405000674,0.007603102629546545,-0.16027984154544825,0.013842491359443402,-0.14575660609577482,0.020755169115786606,-0.13018934694192633,0.026807089492556963,-0.11422282452412354,0.03234889680506951,-0.09960125499606959,0.03934227251832146,-0.08491608919364997,0.046350198757023474,-0.07049187504060692,0.053596752901535795,-0.056868140246221874,0.06155445760905451,-0.043995228119631136,0.07007762037344112,-0.030691880610528056,0.07808203898243078,-0.01938820478599281,0.08761111540391973,-0.007567766280381509,0.09681686920765926,0.004391997874989713,0.10591982749634297,0.017697360325230654,0.1138842903373229,0.0290010361497659,0.12341336675881186,0.03756877957672987,0.1332709496478421,0.0496903733363055,0.14225442334892732,0.060076180217786795,0.15216140299903327,0.06613434056422647,0.14607711328061676,0.06779469025939774,0.13437804475871482,0.0692471976527874,0.12225739682188151,0.0737450336800872,0.11036796263531186,0.07735633833430512,0.09833983133487625,0.0798442765773301,0.08617105560646567,0.0818855039901868,0.07396073868987421,0.08370457066262635,0.06173377844988105,0.08567024211681863,0.049517801207110294,0.08711608857842532,0.03728648189397029,0.0869578094710935,0.024996355153430926,0.0883814017408085,0.012756761445719852,0.08907411553825098,0.0005289078734313464,0.08729618076301217,-0.011700905218124322,0.08521905070457945,-0.023906703952480454,0.08367711976745508,-0.03608848474893891,0.08604039527864481,-0.04827131285381474,0.08766370593626868,-0.0605112614282879,0.08956078650982945,-0.07273007674746582,0.09305185905314971,-0.08467991444607216,0.09632428970840758,-0.09667520068480072,0.09869859978041416,-0.10885717699341547,0.1015770607478122,-0.12098299692980602,0.09939803808146218,-0.130746514562466,0.09343976577624735,-0.13902961905184597,0.07655579726274733,-0.13894107424709487,0.059835175917416196,-0.1345642468781921,0.04486469193009939,-0.1281437696384781,0.030671086965079954,-0.12072924345939082,0.015103282589789397,-0.11466561517820706,-0.000010470294729431603,-0.10810064082827353,-0.01481376153598293,-0.10119286675735648,-0.028984410935145418,-0.09369343096628303,-0.04301416409586259,-0.08606222565688863,-0.05668233546843887,-0.0781281575845521,-0.070481525575695,-0.07030207041462051,-0.08411852767906387,-0.06234478380236389,-0.09751136943440893,-0.05419658699736283,-0.11038426171377853,-0.04566714234515799,-0.12374879489765067,-0.03749223715284226,-0.13578226210269465,-0.028440675727982756,-0.1475691072567941,-0.019207494813028872,-0.15882727172243657,-0.009869504703998297,-0.16314058697345754,0.001857369874239532}

	assert_equal(#expectedVector,#uni.Vector)
	for i,val in ipairs(expectedVector) do
		assert_equal(val,uni.Vector[i],0.000001)
	end
end


function test_Score()
	local protractor = DollarRecognizer()
	local result = protractor.Recognize(test_data.square, true)
	assert_equal("rectangle",result.Name)
	assert_equal(14.878356416657825,result.Score,0.001)
end

function test_UnistrokeV()
	-- had some issues with uni zig-zag ending up with 102 points in vector,
	-- assumedly 51 in points
	-- input/output points:
	-- square	80	61, zig-zag	6	51, right curly brace 70	62
	
end

function test_vs()
	local protractor = DollarRecognizer()
	local result = protractor.Recognize(test_data.vs, true)
	assert_equal("caret",result.Name)
end

function test_vs2()
	local protractor = DollarRecognizer()
	local result = protractor.Recognize(test_data.vs2, true)
	assert_equal("caret",result.Name)
end

function test_vs3()
	local protractor = DollarRecognizer()
	local result = protractor.Recognize(test_data.vs3, true)
	assert_equal("caret",result.Name)
end

function test_os()
	local protractor = DollarRecognizer()
	local result = protractor.Recognize(test_data.os, true)
	return
	assert_equal("circle",result.Name)
end

function test_square()
	local protractor = DollarRecognizer()
	local result = protractor.Recognize(test_data.square, true)
	assert_equal("rectangle",result.Name)
end

lunatest.run()

